if(metodo == "gentle"){return(ejecutar.prediccion(datos, formula, muestra, metodo,iter=80,nu=1, type = "gentle"))}
}
numero.filas <- nrow(Datos)
cantidad.grupos <- 10
cantidad.validacion.cruzada <- 5
tam <- floor(sqrt(nrow(Datos)))
metodos <- c("discrete", "real", "gentle")
#si's
deteccion.si.discrete <- c()
deteccion.si.real <- c()
deteccion.si.gentle <- c()
#errores
deteccion.error.discrete <- c()
deteccion.error.real <- c()
deteccion.error.gentle <- c()
# Exportamos paquetes a los procesadores
ignore <- clusterEvalQ(clp, {
library(dplyr)
library(traineR)
return(NULL)
})
# Exportamos los datos y las funciones a los procesadores
clusterExport(clp, list("Datos", "ejecutar.prediccion", "ejecutar.prediccion.particular"))
tiempo.paralelo <- Sys.time()
for(i in 1:cantidad.validacion.cruzada) {
grupos <- createFolds(1:numero.filas, cantidad.grupos)
si.discrete <- 0
si.real <- 0
si.gentle <- 0
for(k in 1:cantidad.grupos) {
muestra <- grupos[[k]]
### Inserta estas 1 variable en cada pe贸n
clusterExport(clp, "muestra")
resultado <- clusterApply(clp, metodos, function(metodo) {
MC <- ejecutar.prediccion.particular(datos = Datos, formula = tipo~., muestra = muestra, metodo = metodo)
no.val <- MC["Si", "Si"]
valores <- list(Tipo = metodo, Resultado = no.val)
return(valores)
})
for (j in 1:length(metodos)) {
if (resultado[[j]][[1]] == "discrete")
si.discrete <- si.discrete + resultado[[j]][[2]]
else if (resultado[[j]][[1]] == "real")
si.real <- si.real + resultado[[j]][[2]]
else if (resultado[[j]][[1]] == "gentle")
si.gentle <- si.gentle + resultado[[j]][[2]]
}
}
deteccion.si.discrete[i] <- si.discrete
deteccion.si.real[i] <- si.real
deteccion.si.gentle[i] <- si.gentle
}
# Inicia Proceso Paralelo
peones <- parallel::detectCores()
clp <- makeCluster(peones, type = "SOCK")
ejecutar.prediccion <- function(datos, formula, muestra, metodo, ...) {
ttesting <- datos[muestra, ]
ttraining <- datos[-muestra, ]
modelo <- do.call(metodo, list(formula, data = ttraining, ...))
prediccion <- predict(modelo, ttesting, type = "class")
MC <- confusion.matrix(ttesting, prediccion)
return(MC)
}
ejecutar.prediccion.particular <- function(datos, formula, muestra, metodo) {
print(metodo)
if(metodo == "discrete"){return(ejecutar.prediccion(datos, formula, muestra, metodo,iter=80,nu=1, type = "discrete"))}
if(metodo == "real"){return(ejecutar.prediccion(datos, formula, muestra, metodo,iter=80,nu=1, type = "real"))}
if(metodo == "gentle"){return(ejecutar.prediccion(datos, formula, muestra, metodo,iter=80,nu=1, type = "gentle"))}
}
numero.filas <- nrow(Datos)
cantidad.grupos <- 10
cantidad.validacion.cruzada <- 5
tam <- floor(sqrt(nrow(Datos)))
metodos <- c("discrete", "real", "gentle")
#si's
deteccion.si.discrete <- c()
deteccion.si.real <- c()
deteccion.si.gentle <- c()
#errores
deteccion.error.discrete <- c()
deteccion.error.real <- c()
deteccion.error.gentle <- c()
# Exportamos paquetes a los procesadores
ignore <- clusterEvalQ(clp, {
library(dplyr)
library(traineR)
return(NULL)
})
# Exportamos los datos y las funciones a los procesadores
clusterExport(clp, list("Datos", "ejecutar.prediccion", "ejecutar.prediccion.particular"))
tiempo.paralelo <- Sys.time()
for(i in 1:cantidad.validacion.cruzada) {
grupos <- createFolds(1:numero.filas, cantidad.grupos)
si.discrete <- 0
si.real <- 0
si.gentle <- 0
for(k in 1:cantidad.grupos) {
muestra <- grupos[[k]]
### Inserta estas 1 variable en cada pe贸n
clusterExport(clp, "muestra")
resultado <- clusterApply(clp, metodos, function(metodo) {
MC <- ejecutar.prediccion.particular(datos = Datos, formula = tipo~., muestra = muestra, metodo = metodo)
no.val <- MC["Si", "Si"]
valores <- list(Tipo = metodo, Resultado = no.val)
return(valores)
})
for (j in 1:length(metodos)) {
if (resultado[[j]][[1]] == "discrete")
si.discrete <- si.discrete + resultado[[j]][[2]]
else if (resultado[[j]][[1]] == "real")
si.real <- si.real + resultado[[j]][[2]]
else if (resultado[[j]][[1]] == "gentle")
si.gentle <- si.gentle + resultado[[j]][[2]]
}
}
deteccion.si.discrete[i] <- si.discrete
deteccion.si.real[i] <- si.real
deteccion.si.gentle[i] <- si.gentle
}
# Inicia Proceso Paralelo
peones <- parallel::detectCores()
clp <- makeCluster(peones, type = "SOCK")
ejecutar.prediccion <- function(datos, formula, muestra, metodo, ...) {
ttesting <- datos[muestra, ]
ttraining <- datos[-muestra, ]
modelo <- do.call(metodo, list(formula, data = ttraining, ...))
prediccion <- predict(modelo, ttesting, type = "class")
MC <- confusion.matrix(ttesting, prediccion)
return(MC)
}
ejecutar.prediccion.particular <- function(datos, formula, muestra, metodo) {
print(metodo)
if(metodo == "discrete"){return(ejecutar.prediccion(datos, formula, muestra, metodo, iter = 20, nu = 1, type = "discrete"))}
if(metodo == "real"){return(ejecutar.prediccion(datos, formula, muestra, metodo,iter=80,nu=1, type = "real"))}
if(metodo == "gentle"){return(ejecutar.prediccion(datos, formula, muestra, metodo,iter=80,nu=1, type = "gentle"))}
}
numero.filas <- nrow(Datos)
cantidad.grupos <- 10
cantidad.validacion.cruzada <- 5
tam <- floor(sqrt(nrow(Datos)))
metodos <- c("discrete", "real", "gentle")
#si's
deteccion.si.discrete <- c()
deteccion.si.real <- c()
deteccion.si.gentle <- c()
#errores
deteccion.error.discrete <- c()
deteccion.error.real <- c()
deteccion.error.gentle <- c()
# Exportamos paquetes a los procesadores
ignore <- clusterEvalQ(clp, {
library(dplyr)
library(traineR)
return(NULL)
})
# Exportamos los datos y las funciones a los procesadores
clusterExport(clp, list("Datos", "ejecutar.prediccion", "ejecutar.prediccion.particular"))
tiempo.paralelo <- Sys.time()
for(i in 1:cantidad.validacion.cruzada) {
grupos <- createFolds(1:numero.filas, cantidad.grupos)
si.discrete <- 0
si.real <- 0
si.gentle <- 0
for(k in 1:cantidad.grupos) {
muestra <- grupos[[k]]
### Inserta estas 1 variable en cada pe贸n
clusterExport(clp, "muestra")
resultado <- clusterApply(clp, metodos, function(metodo) {
MC <- ejecutar.prediccion.particular(datos = Datos, formula = tipo~., muestra = muestra, metodo = metodo)
no.val <- MC["Si", "Si"]
valores <- list(Tipo = metodo, Resultado = no.val)
return(valores)
})
for (j in 1:length(metodos)) {
if (resultado[[j]][[1]] == "discrete")
si.discrete <- si.discrete + resultado[[j]][[2]]
else if (resultado[[j]][[1]] == "real")
si.real <- si.real + resultado[[j]][[2]]
else if (resultado[[j]][[1]] == "gentle")
si.gentle <- si.gentle + resultado[[j]][[2]]
}
}
deteccion.si.discrete[i] <- si.discrete
deteccion.si.real[i] <- si.real
deteccion.si.gentle[i] <- si.gentle
}
knitr::opts_chunk$set(echo = TRUE)
library(snow)
library(traineR)
library(caret)
library(rpart.plot)
library(ggplot2)
library(dplyr)
library(glue)
library(tidyverse)
library(scales)
library(class)
library(e1071)
library(randomForest)
setwd("~/ALEJANDRO/1er Ciclo 2023/Mineria de Datos/Tarea 7/Datos Clase y Tareas")
Datos <- read.csv("Tumores.csv", header=TRUE, sep=',',dec='.',stringsAsFactors = T)
enteros <- sapply(Datos, is.integer)
Datos[enteros] <- lapply(Datos[enteros], as.factor)
Datos$tipo <- factor(Datos$tipo)
Datos <- subset(Datos, select = -1)
set.seed(123) # Fijamos la semilla para reproducibilidad
indice <- createDataPartition(y = Datos$tipo, p = 0.25, list = FALSE)
# ttesting <- Datos[indice, ]
# ttraining <- Datos[-indice, ]
str(Datos)
# Inicia Proceso Paralelo
peones <- parallel::detectCores()
clp <- makeCluster(peones, type = "SOCK")
ejecutar.prediccion <- function(datos, formula, muestra, metodo, ...) {
ttesting <- datos[muestra, ]
ttraining <- datos[-muestra, ]
modelo <- do.call(metodo, list(formula, data = ttraining, ...))
prediccion <- predict(modelo, ttesting, type = "class")
MC <- confusion.matrix(ttesting, prediccion)
return(MC)
}
ejecutar.prediccion.particular <- function(datos, formula, muestra, metodo) {
print(metodo)
if(metodo == "discrete"){return(ejecutar.prediccion(datos, formula, muestra, metodo, iter = 20, nu = 1, type = "discrete"))}
if(metodo == "real"){return(ejecutar.prediccion(datos, formula, muestra, metodo,iter=80,nu=1, type = "real"))}
if(metodo == "gentle"){return(ejecutar.prediccion(datos, formula, muestra, metodo,iter=80,nu=1, type = "gentle"))}
}
numero.filas <- nrow(Datos)
cantidad.grupos <- 10
cantidad.validacion.cruzada <- 5
tam <- floor(sqrt(nrow(Datos)))
metodos <- c("discrete", "real", "gentle")
#si's
deteccion.si.discrete <- c()
deteccion.si.real <- c()
deteccion.si.gentle <- c()
#errores
deteccion.error.discrete <- c()
deteccion.error.real <- c()
deteccion.error.gentle <- c()
# Exportamos paquetes a los procesadores
ignore <- clusterEvalQ(clp, {
library(dplyr)
library(traineR)
return(NULL)
})
# Exportamos los datos y las funciones a los procesadores
clusterExport(clp, list("Datos", "ejecutar.prediccion", "ejecutar.prediccion.particular"))
tiempo.paralelo <- Sys.time()
for(i in 1:cantidad.validacion.cruzada) {
grupos <- createFolds(1:numero.filas, cantidad.grupos)
si.discrete <- 0
si.real <- 0
si.gentle <- 0
for(k in 1:cantidad.grupos) {
muestra <- grupos[[k]]
### Inserta estas 1 variable en cada pe贸n
clusterExport(clp, "muestra")
resultado <- clusterApply(clp, metodos, function(metodo) {
MC <- ejecutar.prediccion.particular(datos = Datos, formula = tipo~., muestra = muestra, metodo = metodo)
no.val <- MC["Si", "Si"]
valores <- list(Tipo = metodo, Resultado = no.val)
return(valores)
})
for (j in 1:length(metodos)) {
if (resultado[[j]][[1]] == "discrete")
si.discrete <- si.discrete + resultado[[j]][[2]]
else if (resultado[[j]][[1]] == "real")
si.real <- si.real + resultado[[j]][[2]]
else if (resultado[[j]][[1]] == "gentle")
si.gentle <- si.gentle + resultado[[j]][[2]]
}
}
deteccion.si.discrete[i] <- si.discrete
deteccion.si.real[i] <- si.real
deteccion.si.gentle[i] <- si.gentle
}
# Inicia Proceso Paralelo
peones <- parallel::detectCores()
clp <- makeCluster(peones, type = "SOCK")
ejecutar.prediccion <- function(datos, formula, muestra, metodo, ...) {
ttesting <- datos[muestra, ]
ttraining <- datos[-muestra, ]
modelo <- do.call(metodo, list(formula, data = ttraining, ...))
prediccion <- predict(modelo, ttesting, type = "class")
MC <- confusion.matrix(ttesting, prediccion)
return(MC)
}
ejecutar.prediccion.particular <- function(datos, formula, muestra, metodo) {
print(metodo)
if(metodo == "discrete"){return(ejecutar.prediccion(datos, formula, muestra, metodo, iter = 20, nu = 1, type = "discrete"))}
if(metodo == "real"){return(ejecutar.prediccion(datos, formula, muestra, metodo,iter=80,nu=1, type = "real"))}
if(metodo == "gentle"){return(ejecutar.prediccion(datos, formula, muestra, metodo,iter=80,nu=1, type = "gentle"))}
}
numero.filas <- nrow(Datos)
cantidad.grupos <- 10
cantidad.validacion.cruzada <- 5
tam <- floor(sqrt(nrow(Datos)))
metodos <- c("discrete", "real", "gentle")
#si's
deteccion.si.discrete <- c()
deteccion.si.real <- c()
deteccion.si.gentle <- c()
#errores
deteccion.error.discrete <- c()
deteccion.error.real <- c()
deteccion.error.gentle <- c()
# Exportamos paquetes a los procesadores
ignore <- clusterEvalQ(clp, {
library(dplyr)
library(traineR)
return(NULL)
})
# Exportamos los datos y las funciones a los procesadores
clusterExport(clp, list("Datos", "ejecutar.prediccion", "ejecutar.prediccion.particular"))
tiempo.paralelo <- Sys.time()
for(i in 1:cantidad.validacion.cruzada) {
grupos <- createFolds(1:numero.filas, cantidad.grupos)
si.discrete <- 0
si.real <- 0
si.gentle <- 0
for(k in 1:cantidad.grupos) {
muestra <- grupos[[k]]
### Inserta estas 1 variable en cada pe贸n
clusterExport(clp, "muestra")
resultado <- clusterApply(clp, metodos, function(metodo) {
MC <- ejecutar.prediccion.particular(datos = Datos, formula = tipo~., muestra = muestra, metodo = metodo)
no.val <- MC[2, 2]
valores <- list(Tipo = metodo, Resultado = no.val)
return(valores)
})
for (j in 1:length(metodos)) {
if (resultado[[j]][[1]] == "discrete")
si.discrete <- si.discrete + resultado[[j]][[2]]
else if (resultado[[j]][[1]] == "real")
si.real <- si.real + resultado[[j]][[2]]
else if (resultado[[j]][[1]] == "gentle")
si.gentle <- si.gentle + resultado[[j]][[2]]
}
}
deteccion.si.discrete[i] <- si.discrete
deteccion.si.real[i] <- si.real
deteccion.si.gentle[i] <- si.gentle
}
# Inicia Proceso Paralelo
peones <- parallel::detectCores()
clp <- makeCluster(peones, type = "SOCK")
ejecutar.prediccion <- function(datos, formula, muestra, metodo, ...) {
ttesting <- datos[muestra, ]
ttraining <- datos[-muestra, ]
modelo <- do.call(metodo, list(formula, data = ttraining, ...))
prediccion <- predict(modelo, ttesting, type = "class")
MC <- confusion.matrix(ttesting, prediccion)
return(MC)
}
ejecutar.prediccion.particular <- function(datos, formula, muestra, metodo) {
print(metodo)
# if(metodo == "discrete"){return(ejecutar.prediccion(datos, formula, muestra, metodo, iter = 20, nu = 1, type = "discrete"))}
if(metodo == "real"){return(ejecutar.prediccion(datos, formula, muestra, metodo,iter=80,nu=1, type = "real"))}
if(metodo == "gentle"){return(ejecutar.prediccion(datos, formula, muestra, metodo,iter=80,nu=1, type = "gentle"))}
}
numero.filas <- nrow(Datos)
cantidad.grupos <- 10
cantidad.validacion.cruzada <- 5
tam <- floor(sqrt(nrow(Datos)))
metodos <- c("discrete", "real", "gentle")
#si's
deteccion.si.discrete <- c()
deteccion.si.real <- c()
deteccion.si.gentle <- c()
#errores
deteccion.error.discrete <- c()
deteccion.error.real <- c()
deteccion.error.gentle <- c()
# Exportamos paquetes a los procesadores
ignore <- clusterEvalQ(clp, {
library(dplyr)
library(traineR)
return(NULL)
})
# Exportamos los datos y las funciones a los procesadores
clusterExport(clp, list("Datos", "ejecutar.prediccion", "ejecutar.prediccion.particular"))
tiempo.paralelo <- Sys.time()
for(i in 1:cantidad.validacion.cruzada) {
grupos <- createFolds(1:numero.filas, cantidad.grupos)
si.discrete <- 0
si.real <- 0
si.gentle <- 0
for(k in 1:cantidad.grupos) {
muestra <- grupos[[k]]
### Inserta estas 1 variable en cada pe贸n
clusterExport(clp, "muestra")
resultado <- clusterApply(clp, metodos, function(metodo) {
MC <- ejecutar.prediccion.particular(datos = Datos, formula = tipo~., muestra = muestra, metodo = metodo)
no.val <- MC[2, 2]
valores <- list(Tipo = metodo, Resultado = no.val)
return(valores)
})
for (j in 1:length(metodos)) {
if (resultado[[j]][[1]] == "discrete")
si.discrete <- si.discrete + resultado[[j]][[2]]
else if (resultado[[j]][[1]] == "real")
si.real <- si.real + resultado[[j]][[2]]
else if (resultado[[j]][[1]] == "gentle")
si.gentle <- si.gentle + resultado[[j]][[2]]
}
}
deteccion.si.discrete[i] <- si.discrete
deteccion.si.real[i] <- si.real
deteccion.si.gentle[i] <- si.gentle
}
# Inicia Proceso Paralelo
peones <- parallel::detectCores()
clp <- makeCluster(peones, type = "SOCK")
ejecutar.prediccion <- function(datos, formula, muestra, metodo, ...) {
ttesting <- datos[muestra, ]
ttraining <- datos[-muestra, ]
modelo <- do.call(metodo, list(formula, data = ttraining, ...))
prediccion <- predict(modelo, ttesting, type = "class")
MC <- confusion.matrix(ttesting, prediccion)
return(MC)
}
ejecutar.prediccion.particular <- function(datos, formula, muestra, metodo) {
if(metodo == "train.ada"){return(ejecutar.prediccion(datos,formula,muestra,metodo,iter=80,nu=1,type = "discrete"))}
if(metodo == "real"){return(ejecutar.prediccion(datos, formula, muestra, metodo,iter=80,nu=1, type = "real"))}
if(metodo == "gentle"){return(ejecutar.prediccion(datos, formula, muestra, metodo,iter=80,nu=1, type = "gentle"))}
}
numero.filas <- nrow(Datos)
cantidad.grupos <- 10
cantidad.validacion.cruzada <- 5
tam <- floor(sqrt(nrow(Datos)))
metodos <- c("train.ada")
#si's
deteccion.si.discrete <- c()
deteccion.si.real <- c()
deteccion.si.gentle <- c()
#errores
deteccion.error.discrete <- c()
deteccion.error.real <- c()
deteccion.error.gentle <- c()
# Exportamos paquetes a los procesadores
ignore <- clusterEvalQ(clp, {
library(dplyr)
library(traineR)
return(NULL)
})
# Inicia Proceso Paralelo
peones <- parallel::detectCores()
clp <- makeCluster(peones, type = "SOCK")
ejecutar.prediccion <- function(datos, formula, muestra, metodo, ...) {
ttesting <- datos[muestra, ]
ttraining <- datos[-muestra, ]
modelo <- do.call(metodo, list(formula, data = ttraining, ...))
prediccion <- predict(modelo, ttesting, type = "class")
MC <- confusion.matrix(ttesting, prediccion)
return(MC)
}
ejecutar.prediccion.particular <- function(datos, formula, muestra, metodo) {
if(metodo == "train.ada"){return(ejecutar.prediccion(datos,formula,muestra,metodo,iter=80,nu=1,type = "discrete"))}
if(metodo == "real"){return(ejecutar.prediccion(datos, formula, muestra, metodo,iter=80,nu=1, type = "real"))}
if(metodo == "gentle"){return(ejecutar.prediccion(datos, formula, muestra, metodo,iter=80,nu=1, type = "gentle"))}
}
numero.filas <- nrow(Datos)
cantidad.grupos <- 10
cantidad.validacion.cruzada <- 5
tam <- floor(sqrt(nrow(Datos)))
metodos <- c("train.ada")
#si's
deteccion.si.discrete <- c()
deteccion.si.real <- c()
deteccion.si.gentle <- c()
#errores
deteccion.error.discrete <- c()
deteccion.error.real <- c()
deteccion.error.gentle <- c()
# Exportamos paquetes a los procesadores
ignore <- clusterEvalQ(clp, {
library(dplyr)
library(traineR)
return(NULL)
})
# Exportamos los datos y las funciones a los procesadores
clusterExport(clp, list("Datos", "ejecutar.prediccion", "ejecutar.prediccion.particular"))
tiempo.paralelo <- Sys.time()
for(i in 1:cantidad.validacion.cruzada) {
grupos <- createFolds(1:numero.filas, cantidad.grupos)
si.discrete <- 0
si.real <- 0
si.gentle <- 0
for(k in 1:cantidad.grupos) {
muestra <- grupos[[k]]
### Inserta estas 1 variable en cada pe贸n
clusterExport(clp, "muestra")
resultado <- clusterApply(clp, metodos, function(metodo) {
MC <- ejecutar.prediccion.particular(datos = Datos, formula = tipo~., muestra = muestra, metodo = metodo)
no.val <- MC[2, 2]
valores <- list(Tipo = metodo, Resultado = no.val)
return(valores)
})
for (j in 1:length(metodos)) {
if (resultado[[j]][[1]] == "train.ada")
si.discrete <- si.discrete + resultado[[j]][[2]]
else if (resultado[[j]][[1]] == "real")
si.real <- si.real + resultado[[j]][[2]]
else if (resultado[[j]][[1]] == "gentle")
si.gentle <- si.gentle + resultado[[j]][[2]]
}
}
deteccion.si.discrete[i] <- si.discrete
deteccion.si.real[i] <- si.real
deteccion.si.gentle[i] <- si.gentle
}
