"gaussian"     =sapply(MCs.gaussian,precision("1")) ,
"optimal" = sapply(MCs.optimal,precision("1"))) # Preparamos los datos
par(oma = c(0, 0, 0, 8))  # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, 1),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de 1's detectados",main = "Comparacion de porcentaje de 1's detectados",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend("topright",legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
#===============================================
# GRAFICACION 0's
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,precision("0")),
"triangular"     =sapply(MCs.triangular,precision("0")) ,
"epanechnikov" = sapply(MCs.epanechnikov,precision("0")),
"biweight"     = sapply(MCs.biweight,precision("0")),
"triweight"     = sapply(MCs.triweight,precision("0")),
"cos" = sapply(MCs.cos,precision("0")),
"inv"     = sapply(MCs.inv,precision("0")),
"gaussian"     =sapply(MCs.gaussian,precision("0")) ,
"optimal" = sapply(MCs.optimal,precision("0"))) # Preparamos los datos
par(oma=c(0, 0, 0, 8)) # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, 1),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de 0's detectados",main = "Comparacion de porcentaje de 0's detectados",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend("topright",legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
#==========================================
# GRAFICACION Error global
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,error.global),
"triangular"     =sapply(MCs.triangular,error.global) ,
"epanechnikov" = sapply(MCs.epanechnikov,error.global),
"biweight"     = sapply(MCs.biweight,error.global),
"triweight"     = sapply(MCs.triweight,error.global),
"cos" = sapply(MCs.cos,error.global),
"inv"     = sapply(MCs.inv,error.global),
"gaussian"     =sapply(MCs.gaussian,error.global) ,
"optimal" = sapply(MCs.optimal,error.global)) # Preparamos los datos
par(oma = c(0, 0, 0, 8))  # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, max(resultados)),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de Error Global",main = "Comparacion de Error Global",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend("topright",legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
# GRAFICACION 1's
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,precision("1")),
"triangular"     =sapply(MCs.triangular,precision("1")) ,
"epanechnikov" = sapply(MCs.epanechnikov,precision("1")),
"biweight"     = sapply(MCs.biweight,precision("1")),
"triweight"     = sapply(MCs.triweight,precision("1")),
"cos" = sapply(MCs.cos,precision("1")),
"inv"     = sapply(MCs.inv,precision("1")),
"gaussian"     =sapply(MCs.gaussian,precision("1")) ,
"optimal" = sapply(MCs.optimal,precision("1"))) # Preparamos los datos
par(oma = c(0, 0, 0, 8))  # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, 1),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de 1's detectados",main = "Comparacion de porcentaje de 1's detectados",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend("topright",legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
#===============================================
# GRAFICACION 0's
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,precision("0")),
"triangular"     =sapply(MCs.triangular,precision("0")) ,
"epanechnikov" = sapply(MCs.epanechnikov,precision("0")),
"biweight"     = sapply(MCs.biweight,precision("0")),
"triweight"     = sapply(MCs.triweight,precision("0")),
"cos" = sapply(MCs.cos,precision("0")),
"inv"     = sapply(MCs.inv,precision("0")),
"gaussian"     =sapply(MCs.gaussian,precision("0")) ,
"optimal" = sapply(MCs.optimal,precision("0"))) # Preparamos los datos
par(oma=c(0, 0, 0, 8)) # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, 1),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de 0's detectados",main = "Comparacion de porcentaje de 0's detectados",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend("topright",legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
#==========================================
# GRAFICACION Error global
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,error.global),
"triangular"     =sapply(MCs.triangular,error.global) ,
"epanechnikov" = sapply(MCs.epanechnikov,error.global),
"biweight"     = sapply(MCs.biweight,error.global),
"triweight"     = sapply(MCs.triweight,error.global),
"cos" = sapply(MCs.cos,error.global),
"inv"     = sapply(MCs.inv,error.global),
"gaussian"     =sapply(MCs.gaussian,error.global) ,
"optimal" = sapply(MCs.optimal,error.global)) # Preparamos los datos
par(oma = c(0, 0, 0, 12))  # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, max(resultados)),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de Error Global",main = "Comparacion de Error Global",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend("topright",legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
# GRAFICACION 1's
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,precision("1")),
"triangular"     =sapply(MCs.triangular,precision("1")) ,
"epanechnikov" = sapply(MCs.epanechnikov,precision("1")),
"biweight"     = sapply(MCs.biweight,precision("1")),
"triweight"     = sapply(MCs.triweight,precision("1")),
"cos" = sapply(MCs.cos,precision("1")),
"inv"     = sapply(MCs.inv,precision("1")),
"gaussian"     =sapply(MCs.gaussian,precision("1")) ,
"optimal" = sapply(MCs.optimal,precision("1"))) # Preparamos los datos
par(oma = c(0, 0, 0, 8))  # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, 1),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de 1's detectados",main = "Comparacion de porcentaje de 1's detectados",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend("topright",legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
#===============================================
# GRAFICACION 0's
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,precision("0")),
"triangular"     =sapply(MCs.triangular,precision("0")) ,
"epanechnikov" = sapply(MCs.epanechnikov,precision("0")),
"biweight"     = sapply(MCs.biweight,precision("0")),
"triweight"     = sapply(MCs.triweight,precision("0")),
"cos" = sapply(MCs.cos,precision("0")),
"inv"     = sapply(MCs.inv,precision("0")),
"gaussian"     =sapply(MCs.gaussian,precision("0")) ,
"optimal" = sapply(MCs.optimal,precision("0"))) # Preparamos los datos
par(oma=c(0, 0, 0, 8)) # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, 1),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de 0's detectados",main = "Comparacion de porcentaje de 0's detectados",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend("topright",legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
#==========================================
# GRAFICACION Error global
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,error.global),
"triangular"     =sapply(MCs.triangular,error.global) ,
"epanechnikov" = sapply(MCs.epanechnikov,error.global),
"biweight"     = sapply(MCs.biweight,error.global),
"triweight"     = sapply(MCs.triweight,error.global),
"cos" = sapply(MCs.cos,error.global),
"inv"     = sapply(MCs.inv,error.global),
"gaussian"     =sapply(MCs.gaussian,error.global) ,
"optimal" = sapply(MCs.optimal,error.global)) # Preparamos los datos
par(oma = c(0, 0, 0, 12))  # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, max(resultados)),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de Error Global",main = "Comparacion de Error Global",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend(x="topright",y = max(resultados) + 5, legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
# GRAFICACION 1's
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,precision("1")),
"triangular"     =sapply(MCs.triangular,precision("1")) ,
"epanechnikov" = sapply(MCs.epanechnikov,precision("1")),
"biweight"     = sapply(MCs.biweight,precision("1")),
"triweight"     = sapply(MCs.triweight,precision("1")),
"cos" = sapply(MCs.cos,precision("1")),
"inv"     = sapply(MCs.inv,precision("1")),
"gaussian"     =sapply(MCs.gaussian,precision("1")) ,
"optimal" = sapply(MCs.optimal,precision("1"))) # Preparamos los datos
par(oma = c(0, 0, 0, 8))  # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, 1),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de 1's detectados",main = "Comparacion de porcentaje de 1's detectados",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend("topright",legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
#===============================================
# GRAFICACION 0's
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,precision("0")),
"triangular"     =sapply(MCs.triangular,precision("0")) ,
"epanechnikov" = sapply(MCs.epanechnikov,precision("0")),
"biweight"     = sapply(MCs.biweight,precision("0")),
"triweight"     = sapply(MCs.triweight,precision("0")),
"cos" = sapply(MCs.cos,precision("0")),
"inv"     = sapply(MCs.inv,precision("0")),
"gaussian"     =sapply(MCs.gaussian,precision("0")) ,
"optimal" = sapply(MCs.optimal,precision("0"))) # Preparamos los datos
par(oma=c(0, 0, 0, 8)) # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, 1),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de 0's detectados",main = "Comparacion de porcentaje de 0's detectados",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend("topright",legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
#==========================================
# GRAFICACION Error global
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,error.global),
"triangular"     =sapply(MCs.triangular,error.global) ,
"epanechnikov" = sapply(MCs.epanechnikov,error.global),
"biweight"     = sapply(MCs.biweight,error.global),
"triweight"     = sapply(MCs.triweight,error.global),
"cos" = sapply(MCs.cos,error.global),
"inv"     = sapply(MCs.inv,error.global),
"gaussian"     =sapply(MCs.gaussian,error.global) ,
"optimal" = sapply(MCs.optimal,error.global)) # Preparamos los datos
par(oma = c(0, 0, 0, 12))  # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, max(resultados)),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de Error Global",main = "Comparacion de Error Global",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend(x="topright",y = max(resultados) + 25, legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
# GRAFICACION 1's
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,precision("1")),
"triangular"     =sapply(MCs.triangular,precision("1")) ,
"epanechnikov" = sapply(MCs.epanechnikov,precision("1")),
"biweight"     = sapply(MCs.biweight,precision("1")),
"triweight"     = sapply(MCs.triweight,precision("1")),
"cos" = sapply(MCs.cos,precision("1")),
"inv"     = sapply(MCs.inv,precision("1")),
"gaussian"     =sapply(MCs.gaussian,precision("1")) ,
"optimal" = sapply(MCs.optimal,precision("1"))) # Preparamos los datos
par(oma = c(0, 0, 0, 8))  # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, 1),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de 1's detectados",main = "Comparacion de porcentaje de 1's detectados",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend("topright",legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
#===============================================
# GRAFICACION 0's
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,precision("0")),
"triangular"     =sapply(MCs.triangular,precision("0")) ,
"epanechnikov" = sapply(MCs.epanechnikov,precision("0")),
"biweight"     = sapply(MCs.biweight,precision("0")),
"triweight"     = sapply(MCs.triweight,precision("0")),
"cos" = sapply(MCs.cos,precision("0")),
"inv"     = sapply(MCs.inv,precision("0")),
"gaussian"     =sapply(MCs.gaussian,precision("0")) ,
"optimal" = sapply(MCs.optimal,precision("0"))) # Preparamos los datos
par(oma=c(0, 0, 0, 8)) # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, 1),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de 0's detectados",main = "Comparacion de porcentaje de 0's detectados",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend("topright",legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
#==========================================
# GRAFICACION Error global
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,error.global),
"triangular"     =sapply(MCs.triangular,error.global) ,
"epanechnikov" = sapply(MCs.epanechnikov,error.global),
"biweight"     = sapply(MCs.biweight,error.global),
"triweight"     = sapply(MCs.triweight,error.global),
"cos" = sapply(MCs.cos,error.global),
"inv"     = sapply(MCs.inv,error.global),
"gaussian"     =sapply(MCs.gaussian,error.global) ,
"optimal" = sapply(MCs.optimal,error.global)) # Preparamos los datos
par(oma = c(0, 0, 0, 12))  # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, max(resultados)),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de Error Global",main = "Comparacion de Error Global",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend(x="topright",y = max(resultados) + 65, legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
# GRAFICACION 1's
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,precision("1")),
"triangular"     =sapply(MCs.triangular,precision("1")) ,
"epanechnikov" = sapply(MCs.epanechnikov,precision("1")),
"biweight"     = sapply(MCs.biweight,precision("1")),
"triweight"     = sapply(MCs.triweight,precision("1")),
"cos" = sapply(MCs.cos,precision("1")),
"inv"     = sapply(MCs.inv,precision("1")),
"gaussian"     =sapply(MCs.gaussian,precision("1")) ,
"optimal" = sapply(MCs.optimal,precision("1"))) # Preparamos los datos
par(oma = c(0, 0, 0, 8))  # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, 1),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de 1's detectados",main = "Comparacion de porcentaje de 1's detectados",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend("topright",legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
#===============================================
# GRAFICACION 0's
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,precision("0")),
"triangular"     =sapply(MCs.triangular,precision("0")) ,
"epanechnikov" = sapply(MCs.epanechnikov,precision("0")),
"biweight"     = sapply(MCs.biweight,precision("0")),
"triweight"     = sapply(MCs.triweight,precision("0")),
"cos" = sapply(MCs.cos,precision("0")),
"inv"     = sapply(MCs.inv,precision("0")),
"gaussian"     =sapply(MCs.gaussian,precision("0")) ,
"optimal" = sapply(MCs.optimal,precision("0"))) # Preparamos los datos
par(oma=c(0, 0, 0, 8)) # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, 1),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de 0's detectados",main = "Comparacion de porcentaje de 0's detectados",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend("topright",legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
#==========================================
# GRAFICACION Error global
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,error.global),
"triangular"     =sapply(MCs.triangular,error.global) ,
"epanechnikov" = sapply(MCs.epanechnikov,error.global),
"biweight"     = sapply(MCs.biweight,error.global),
"triweight"     = sapply(MCs.triweight,error.global),
"cos" = sapply(MCs.cos,error.global),
"inv"     = sapply(MCs.inv,error.global),
"gaussian"     =sapply(MCs.gaussian,error.global) ,
"optimal" = sapply(MCs.optimal,error.global)) # Preparamos los datos
par(oma = c(0, 0, 0, 8))  # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, max(resultados)),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de Error Global",main = "Comparacion de Error Global",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend(x="topright",y = max(resultados) + 65, legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
# GRAFICACION 1's
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,precision("1")),
"triangular"     =sapply(MCs.triangular,precision("1")) ,
"epanechnikov" = sapply(MCs.epanechnikov,precision("1")),
"biweight"     = sapply(MCs.biweight,precision("1")),
"triweight"     = sapply(MCs.triweight,precision("1")),
"cos" = sapply(MCs.cos,precision("1")),
"inv"     = sapply(MCs.inv,precision("1")),
"gaussian"     =sapply(MCs.gaussian,precision("1")) ,
"optimal" = sapply(MCs.optimal,precision("1"))) # Preparamos los datos
par(oma = c(0, 0, 0, 8))  # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, 1),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de 1's detectados",main = "Comparacion de porcentaje de 1's detectados",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend("topright",legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
#===============================================
# GRAFICACION 0's
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,precision("0")),
"triangular"     =sapply(MCs.triangular,precision("0")) ,
"epanechnikov" = sapply(MCs.epanechnikov,precision("0")),
"biweight"     = sapply(MCs.biweight,precision("0")),
"triweight"     = sapply(MCs.triweight,precision("0")),
"cos" = sapply(MCs.cos,precision("0")),
"inv"     = sapply(MCs.inv,precision("0")),
"gaussian"     =sapply(MCs.gaussian,precision("0")) ,
"optimal" = sapply(MCs.optimal,precision("0"))) # Preparamos los datos
par(oma=c(0, 0, 0, 8)) # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, 1),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de 0's detectados",main = "Comparacion de porcentaje de 0's detectados",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend("topright",legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
#==========================================
# GRAFICACION Error global
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,error.global),
"triangular"     =sapply(MCs.triangular,error.global) ,
"epanechnikov" = sapply(MCs.epanechnikov,error.global),
"biweight"     = sapply(MCs.biweight,error.global),
"triweight"     = sapply(MCs.triweight,error.global),
"cos" = sapply(MCs.cos,error.global),
"inv"     = sapply(MCs.inv,error.global),
"gaussian"     =sapply(MCs.gaussian,error.global) ,
"optimal" = sapply(MCs.optimal,error.global)) # Preparamos los datos
par(oma = c(0, 0, 0, 2))  # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, max(resultados)),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de Error Global",main = "Comparacion de Error Global",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend(x="topright",y = max(resultados) + 65, legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
# GRAFICACION 1's
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,precision("1")),
"triangular"     =sapply(MCs.triangular,precision("1")) ,
"epanechnikov" = sapply(MCs.epanechnikov,precision("1")),
"biweight"     = sapply(MCs.biweight,precision("1")),
"triweight"     = sapply(MCs.triweight,precision("1")),
"cos" = sapply(MCs.cos,precision("1")),
"inv"     = sapply(MCs.inv,precision("1")),
"gaussian"     =sapply(MCs.gaussian,precision("1")) ,
"optimal" = sapply(MCs.optimal,precision("1"))) # Preparamos los datos
par(oma = c(0, 0, 0, 8))  # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, 1),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de 1's detectados",main = "Comparacion de porcentaje de 1's detectados",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend("topright",legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
#===============================================
# GRAFICACION 0's
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,precision("0")),
"triangular"     =sapply(MCs.triangular,precision("0")) ,
"epanechnikov" = sapply(MCs.epanechnikov,precision("0")),
"biweight"     = sapply(MCs.biweight,precision("0")),
"triweight"     = sapply(MCs.triweight,precision("0")),
"cos" = sapply(MCs.cos,precision("0")),
"inv"     = sapply(MCs.inv,precision("0")),
"gaussian"     =sapply(MCs.gaussian,precision("0")) ,
"optimal" = sapply(MCs.optimal,precision("0"))) # Preparamos los datos
par(oma=c(0, 0, 0, 8)) # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, 1),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de 0's detectados",main = "Comparacion de porcentaje de 0's detectados",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend("topright",legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
#==========================================
# GRAFICACION Error global
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,error.global),
"triangular"     =sapply(MCs.triangular,error.global) ,
"epanechnikov" = sapply(MCs.epanechnikov,error.global),
"biweight"     = sapply(MCs.biweight,error.global),
"triweight"     = sapply(MCs.triweight,error.global),
"cos" = sapply(MCs.cos,error.global),
"inv"     = sapply(MCs.inv,error.global),
"gaussian"     =sapply(MCs.gaussian,error.global) ,
"optimal" = sapply(MCs.optimal,error.global)) # Preparamos los datos
par(oma = c(0, 0, 0, 0))  # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, max(resultados)),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de Error Global",main = "Comparacion de Error Global",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend(x="topright",y = max(resultados) + 65, legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
# GRAFICACION 1's
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,precision("1")),
"triangular"     =sapply(MCs.triangular,precision("1")) ,
"epanechnikov" = sapply(MCs.epanechnikov,precision("1")),
"biweight"     = sapply(MCs.biweight,precision("1")),
"triweight"     = sapply(MCs.triweight,precision("1")),
"cos" = sapply(MCs.cos,precision("1")),
"inv"     = sapply(MCs.inv,precision("1")),
"gaussian"     =sapply(MCs.gaussian,precision("1")) ,
"optimal" = sapply(MCs.optimal,precision("1"))) # Preparamos los datos
par(oma = c(0, 0, 0, 8))  # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, 1),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de 1's detectados",main = "Comparacion de porcentaje de 1's detectados",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend("topright",legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
#===============================================
# GRAFICACION 0's
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,precision("0")),
"triangular"     =sapply(MCs.triangular,precision("0")) ,
"epanechnikov" = sapply(MCs.epanechnikov,precision("0")),
"biweight"     = sapply(MCs.biweight,precision("0")),
"triweight"     = sapply(MCs.triweight,precision("0")),
"cos" = sapply(MCs.cos,precision("0")),
"inv"     = sapply(MCs.inv,precision("0")),
"gaussian"     =sapply(MCs.gaussian,precision("0")) ,
"optimal" = sapply(MCs.optimal,precision("0"))) # Preparamos los datos
par(oma=c(0, 0, 0, 8)) # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, 1),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de 0's detectados",main = "Comparacion de porcentaje de 0's detectados",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend("topright",legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
#==========================================
# GRAFICACION Error global
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,error.global),
"triangular"     =sapply(MCs.triangular,error.global) ,
"epanechnikov" = sapply(MCs.epanechnikov,error.global),
"biweight"     = sapply(MCs.biweight,error.global),
"triweight"     = sapply(MCs.triweight,error.global),
"cos" = sapply(MCs.cos,error.global),
"inv"     = sapply(MCs.inv,error.global),
"gaussian"     =sapply(MCs.gaussian,error.global) ,
"optimal" = sapply(MCs.optimal,error.global)) # Preparamos los datos
par(oma = c(0, 0, 0, 0))  # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, max(resultados)),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de Error Global",main = "Comparacion de Error Global",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend(par('usr')[2], par('usr')[4], legend = colnames(resultados),bty='n', xpd=NA,
pch=1:ncol(resultados), col = rainbow(ncol(resultados))) # La leyenda
# GRAFICACION 1's
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,precision("1")),
"triangular"     =sapply(MCs.triangular,precision("1")) ,
"epanechnikov" = sapply(MCs.epanechnikov,precision("1")),
"biweight"     = sapply(MCs.biweight,precision("1")),
"triweight"     = sapply(MCs.triweight,precision("1")),
"cos" = sapply(MCs.cos,precision("1")),
"inv"     = sapply(MCs.inv,precision("1")),
"gaussian"     =sapply(MCs.gaussian,precision("1")) ,
"optimal" = sapply(MCs.optimal,precision("1"))) # Preparamos los datos
par(oma = c(0, 0, 0, 8))  # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, 1),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de 1's detectados",main = "Comparacion de porcentaje de 1's detectados",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend("topright",legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
#===============================================
# GRAFICACION 0's
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,precision("0")),
"triangular"     =sapply(MCs.triangular,precision("0")) ,
"epanechnikov" = sapply(MCs.epanechnikov,precision("0")),
"biweight"     = sapply(MCs.biweight,precision("0")),
"triweight"     = sapply(MCs.triweight,precision("0")),
"cos" = sapply(MCs.cos,precision("0")),
"inv"     = sapply(MCs.inv,precision("0")),
"gaussian"     =sapply(MCs.gaussian,precision("0")) ,
"optimal" = sapply(MCs.optimal,precision("0"))) # Preparamos los datos
par(oma=c(0, 0, 0, 8)) # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, 1),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de 0's detectados",main = "Comparacion de porcentaje de 0's detectados",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend("topright",legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
#==========================================
# GRAFICACION Error global
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,error.global),
"triangular"     =sapply(MCs.triangular,error.global) ,
"epanechnikov" = sapply(MCs.epanechnikov,error.global),
"biweight"     = sapply(MCs.biweight,error.global),
"triweight"     = sapply(MCs.triweight,error.global),
"cos" = sapply(MCs.cos,error.global),
"inv"     = sapply(MCs.inv,error.global),
"gaussian"     =sapply(MCs.gaussian,error.global) ,
"optimal" = sapply(MCs.optimal,error.global)) # Preparamos los datos
par(oma = c(0, 0, 0, 0))  # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, max(resultados)),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de Error Global",main = "Comparacion de Error Global",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend(par('usr')[2], par('usr')[4], legend = colnames(resultados),bty='n', xpd=NA,
pch=1:ncol(resultados), col = fill(ncol(resultados))) # La leyenda
# GRAFICACION 1's
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,precision("1")),
"triangular"     =sapply(MCs.triangular,precision("1")) ,
"epanechnikov" = sapply(MCs.epanechnikov,precision("1")),
"biweight"     = sapply(MCs.biweight,precision("1")),
"triweight"     = sapply(MCs.triweight,precision("1")),
"cos" = sapply(MCs.cos,precision("1")),
"inv"     = sapply(MCs.inv,precision("1")),
"gaussian"     =sapply(MCs.gaussian,precision("1")) ,
"optimal" = sapply(MCs.optimal,precision("1"))) # Preparamos los datos
par(oma = c(0, 0, 0, 8))  # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, 1),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de 1's detectados",main = "Comparacion de porcentaje de 1's detectados",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend("topright",legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
#===============================================
# GRAFICACION 0's
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,precision("0")),
"triangular"     =sapply(MCs.triangular,precision("0")) ,
"epanechnikov" = sapply(MCs.epanechnikov,precision("0")),
"biweight"     = sapply(MCs.biweight,precision("0")),
"triweight"     = sapply(MCs.triweight,precision("0")),
"cos" = sapply(MCs.cos,precision("0")),
"inv"     = sapply(MCs.inv,precision("0")),
"gaussian"     =sapply(MCs.gaussian,precision("0")) ,
"optimal" = sapply(MCs.optimal,precision("0"))) # Preparamos los datos
par(oma=c(0, 0, 0, 8)) # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, 1),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de 0's detectados",main = "Comparacion de porcentaje de 0's detectados",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend("topright",legend = colnames(resultados),fill = rainbow(ncol(resultados)),border = NA)
#==========================================
# GRAFICACION Error global
resultados <- data.frame("rectangular"     = sapply(MCs.rectangular,error.global),
"triangular"     =sapply(MCs.triangular,error.global) ,
"epanechnikov" = sapply(MCs.epanechnikov,error.global),
"biweight"     = sapply(MCs.biweight,error.global),
"triweight"     = sapply(MCs.triweight,error.global),
"cos" = sapply(MCs.cos,error.global),
"inv"     = sapply(MCs.inv,error.global),
"gaussian"     =sapply(MCs.gaussian,error.global) ,
"optimal" = sapply(MCs.optimal,error.global)) # Preparamos los datos
par(oma = c(0, 0, 0, 0))  # Hace espacio para la leyenda
# Crear el gráfico de barras
barplot(t(resultados),beside = TRUE,ylim = c(0, max(resultados)),names.arg = 1:nrow(resultados),xlab ="Numero de iteracion",ylab = "Porcentaje de Error Global",main = "Comparacion de Error Global",col = rainbow(ncol(resultados)))
# Agregar la leyenda
legend(par('usr')[2], par('usr')[4], legend = colnames(resultados),bty='n', xpd=NA,
pch=1:ncol(resultados), col = rainbow(ncol(resultados))) # La leyenda
