datos
datos <- read.table('DeudaCredito.csv',header=TRUE, sep=',',dec='')
datos <- read.table('DeudaCredito.csv',header=TRUE, sep=',',dec='.')
datos
table(datos$Genero)
datos$Genero<-factor(datos$Genero,levels=c("Masculino","Femenino"))
table(datos$Genero)
table(datos$Genero)
str(datos$Genero)
table(datos$Etnicidad)
datos$Etnicidad<-factor(datos$Etnicidad,levels=c("Afrodescendiente","Asiatico","Caucasico"))
str(datos$Etnicidad)
datos
datos$Genero
datos$Educacion<-factor(datos$Educacion,levels=c("Si","No"))
str(datos$Educacion)
datos$Educacion
datos
datos$Estudiante<-factor(datos$Estudiante,levels=c("Si","No"))
datos$Estudiante
str(datos$Estudiante)
summary(datos)
install.packages("ellipse")
library(ellipse)
matriz.correlacion<-cor(datos)
plotcorr(matriz.correlacion,col = "red")
summary(datos[-c(datos$Genero,datos$Etnicidad,datos$Estudiante)])
summary(datos[-c("Genero","Etnicidad","Estudiante")])
nuevos<-(datos[-c("Genero","Etnicidad","Estudiante")])
str(datos)
matriz.correlacion<-cor(as.numeric(datos))
matriz.correlacion<-cor(as.numeric(str(datos)))
plotcorr(matriz.correlacion,col = "red")
matriz.correlacion<-cor(as.numeric(str(datos)))
matriz.correlacion<-cor(datos[,-c(6,7,10)])
matriz.correlacion<-cor(datos[,-c("Genero","Etnicidad","Estudiante")])
matriz.correlacion<-cor(datos[,-c(5,6,9)
plotcorr(matriz.correlacion,col = "red")
matriz.correlacion<-cor(datos[,-c(5,6,9)
plotcorr(matriz.correlacion,col = "red")
matriz.correlacion<-cor(datos[,-c(5,6,9))
matriz.correlacion<-cor(datos[,-c(5,6,9)])
summary(datos)
frame(datos)
frame(datos)
str(datos)
matriz.correlacion<-cor(datos[,-c(5,6,7,10)])
matriz.correlacion<-cor(datos[,-c(6,7,8,10)])
matriz.correlacion<-cor(datos[,-c(7,8,9,11)])
plotcorr(matriz.correlacion,col = "red")
str(datos)
matriz.correlacion<-cor(as.data.frame.numeric_version(datos))
matriz.correlacion<-cor(as.numeric(datos))
matriz.correlacion<-cor(as.numeric(str(datos)))
library(corrplot)
corrplot(matriz.correlacion)
set.seed(123)
indices.entrenamiento <- sample(nrow(datos), nrow(datos)*0.8)
datos.entrenamiento <- dataframe[train_indices, ]
indices.entrenamiento <- sample(nrow(datos), nrow(datos)*0.8)
datos.entrenamiento <- datos[indices.entrenamiento, ]
datos
sin.categoricas<-cor(datos[,-c(7,8,9,11)])
set.seed(123)
indices.entrenamiento <- sample(nrow(sin.categoricas), nrow(sin.categoricas)*0.8)
datos.entrenamiento <- sin.categoricas[indices.entrenamiento, ]
datos.entrenamiento
install.packages("FactoMineR")
install.packages("car")
library(FactoMineR)
library(car)
atipicos<-Boxplot(~Edad,data=datos.entrenamiento,id.method="y",col="Blue")
atipicos
atipicos<-Boxplot(~Ingreso,data=datos.entrenamiento,id.method="y",col="Blue")
atipicos
atipicos<-Boxplot(~,data=datos.entrenamiento,id.method="y",col="Blue")
atipicos<-Boxplot(data=datos.entrenamiento,id.method="y",col="Blue")
atipicos<-Boxplot(c(~Ingreso),data=datos.entrenamiento,id.method="y",col="Blue")
atipicos
atipicos<-Boxplot(c(~Ingreso,~Limite),data=datos.entrenamiento,id.method="y",col="Blue")
atipicos
atipicos<-Boxplot(~c(Ingreso,Limite),data=datos.entrenamiento,id.method="y",col="Blue")
atipicos
atipicos<-Boxplot(datos.entrenamiento,data=datos.entrenamiento,id.method="y",col="Blue")
atipicos
sin.categoricas<-cor(datos[,-c(7,8,9,10,11)])
indices.entrenamiento <- sample(nrow(sin.categoricas), nrow(sin.categoricas)*0.8)
datos.entrenamiento <- sin.categoricas[indices.entrenamiento, ]
atipicos<-Boxplot(datos.entrenamiento,data=datos.entrenamiento,id.method="y",col="Blue")
atipicos
atipicos[1]
atipicos<-Boxplot(~Tarjetas,data=datos.entrenamiento,id.method="y",col="Blue")
atipicos
cant<-sum(datos.entrenamiento$Tarjetas>0.8)
cant<-sum(datos.entrenamiento[4]>0.8)
cant
atipicos<-Boxplot(datos.entrenamiento,data=datos.entrenamiento,id.method="y",col="Blue")
atipicos
datos.entrenamiento
plotcorr(matriz.correlacion,col = "red")
corrplot(matriz.correlacion)
datos
lower <- function(datos.entrenamiento, mapping){
p <- ggplot(data = datos.entrenamiento, mapping = mapping) +
geom_point(size = 1,col = "dodgerblue3") +
geom_smooth(method = lm, size = 0.4, color = "red", se = FALSE)
return(p)
}
diag <- function(datos.entrenamiento, mapping){
p <- ggplot(data = datos.entrenamiento, mapping = mapping) +
geom_histogram(bins = 30, col = "black", fill = "#F8766D", aes(y=..density..)) +
geom_density()
return(p)
}
library(tidyverse)
lower <- function(data, mapping){
p <- ggplot(data = data, mapping = mapping) +
geom_point(size = 1,col = "dodgerblue3") +
geom_smooth(method = lm, size = 0.4, color = "red", se = FALSE)
return(p)
}
diag <- function(data, mapping){
p <- ggplot(data = data, mapping = mapping) +
geom_histogram(bins = 30, col = "black", fill = "#F8766D", aes(y=..density..)) +
geom_density()
return(p)
}
gpairs(select_if(datos.entrenamiento, is.numeric) %>% dplyr::select(-Balance, everything()), # el select posiciona la variable a predecir al final, para que se grafique bien en caso de que solo haya 1 variable a predecir
lower = list(continuous = lower), diag = list(continuous = diag))
library(tidyverse)
gpairs(select_if(datos.entrenamiento, is.numeric) %>% dplyr::select(-Balance, everything()), # el select posiciona la variable a predecir al final, para que se grafique bien en caso de que solo haya 1 variable a predecir
lower = list(continuous = lower), diag = list(continuous = diag))
install.packages("gpairs")
gpairs(select_if(datos.entrenamiento, is.numeric) %>% dplyr::select(-Balance, everything()), # el select posiciona la variable a predecir al final, para que se grafique bien en caso de que solo haya 1 variable a predecir
lower = list(continuous = lower), diag = list(continuous = diag))
library(gpairs)
gpairs(select_if(datos.entrenamiento, is.numeric) %>% dplyr::select(-Balance, everything()), # el select posiciona la variable a predecir al final, para que se grafique bien en caso de que solo haya 1 variable a predecir
lower = list(continuous = lower), diag = list(continuous = diag))
gpairs(select_if(datos.entrenamiento, is.numeric) %>% dplyr::select(-ValorProm, everything()),
# el select posiciona la variable a predecir al final, para que se grafique bien en caso de que solo haya 1 variable a predecir
lower = list(continuous = lower), diag = list(continuous = diag))
gpairs(select_if(datos.entrenamiento, is.numeric) %>% dplyr::select(-ValorProm, everything()),
# el select posiciona la variable a predecir al final, para que se grafique bien en caso de que solo haya 1 variable a predecir
lower = list(continuous = lower), diag = list(continuous = diag))
gpairs(select_if(datos.entrenamiento, is.numeric) %>% dplyr::select(-Balance, everything()),
# el select posiciona la variable a predecir al final, para que se grafique bien en caso de que solo haya 1 variable a predecir
lower = list(continuous = lower), diag = list(continuous = diag))
gpairs(select_if(datos.entrenamiento, is.numeric) %>% dplyr::select(-Ingreso, everything()),
# el select posiciona la variable a predecir al final, para que se grafique bien en caso de que solo haya 1 variable a predecir
lower = list(continuous = lower), diag = list(continuous = diag))
gpairs(select_if(datos.entrenamiento, is.numeric) %>% dplyr::select(-Ingreso),
# el select posiciona la variable a predecir al final, para que se grafique bien en caso de que solo haya 1 variable a predecir
lower = list(continuous = lower), diag = list(continuous = diag))
gpairs(select_if(datos.entrenamiento, is.numeric) %>% dplyr::select(-Ingreso),
# el select posiciona la variable a predecir al final, para que se grafique bien en caso de que solo haya 1 variable a predecir
lower = list(continuous = lower), diag = list(continuous = diag))
gpairs(select_if(datos.entrenamiento, is.numeric) %>% dplyr::select(-Balance, everything()),
# el select posiciona la variable a predecir al final, para que se grafique bien en caso de que solo haya 1 variable a predecir
lower = list(continuous = lower), diag = list(continuous = diag))
gpairs(select_if(datos.entrenamiento, is.numeric) %>% dplyr::select(-Balance, everything()),
lower = list(continuous = lower), diag = list(continuous = diag))
datos.entrenamiento
sin.categoricas<-cor(datos[,-c(7,8,9,10,11)])
sin.categoricas
lower <- function(data, mapping){
p <- ggplot(data = data, mapping = mapping) +
geom_point(size = 1,col = "dodgerblue3") +
geom_smooth(method = lm, size = 0.4, color = "red", se = FALSE)
return(p)
}
diag <- function(data, mapping){
p <- ggplot(data = data, mapping = mapping) +
geom_histogram(bins = 30, col = "black", fill = "#F8766D", aes(y=..density..)) +
geom_density()
return(p)
}
datos.entrenamiento
gpairs(select_if(datos.entrenamiento, is.numeric) %>% dplyr::select(-Balance, everything()),
lower = list(continuous = lower), diag = list(continuous = diag))
sin.categoricas<-cor(datos[,-c(7,8,9,10,11)])
sin.categoricas
datos[sin.categoricas]
sin.categoricas
str(sin.categoricas)
sin.categoricas<-datos <- subset(datos, select = -Educacion)
sin.categoricas
sin.categoricas<-datos <- subset(datos, select = -c(Educacion,Estudiante,Genero,Casado,Etnicidad))
sin.categoricas<-datos <- subset(datos, select = -c(Estudiante,Genero,Casado,Etnicidad))
sin.categoricas
str(sin.categoricas)
plotcorr(matriz.correlacion,col = "red")
corrplot(matriz.correlacion)
set.seed(123)
indices.entrenamiento <- sample(nrow(sin.categoricas), nrow(sin.categoricas)*0.8)
datos.entrenamiento <- sin.categoricas[indices.entrenamiento, ]
datos.entrenamiento
atipicos<-Boxplot(datos.entrenamiento,data=datos.entrenamiento,id.method="y",col="Blue")
atipicos
lower <- function(data, mapping){
p <- ggplot(data = data, mapping = mapping) +
geom_point(size = 1,col = "dodgerblue3") +
geom_smooth(method = lm, size = 0.4, color = "red", se = FALSE)
return(p)
}
diag <- function(data, mapping){
p <- ggplot(data = data, mapping = mapping) +
geom_histogram(bins = 30, col = "black", fill = "#F8766D", aes(y=..density..)) +
geom_density()
return(p)
}
datos.entrenamiento
gpairs(select_if(datos.entrenamiento, is.numeric) %>% dplyr::select(-Balance, everything()),
lower = list(continuous = lower), diag = list(continuous = diag))
gpairs(select_if(datos.entrenamiento, is.numeric) %>% dplyr::select(-Balance, everything()),
lower = list(continuous = lower), diag = list(continuous = diag))
corrplot(matriz.correlacion)
ggpairs(select_if(datos.entrenamiento, is.numeric) %>% dplyr::select(-Balance, everything()),
lower = list(continuous = lower), diag = list(continuous = diag))
ggpairs(select_if(Datos2, is.numeric) %>% dplyr::select(-Balance, everything()), # el select posiciona la variable a predecir al final, para que se grafique bien en caso de que solo haya 1 variable a predecir
lower = list(continuous = lower), diag = list(continuous = diag))
install.packages("GGally")
library(GGally)
ggpairs(select_if(Datos2, is.numeric) %>% dplyr::select(-Balance, everything()), # el select posiciona la variable a predecir al final, para que se grafique bien en caso de que solo haya 1 variable a predecir
lower = list(continuous = lower), diag = list(continuous = diag))
ggpairs(select_if(datos.entrenamiento, is.numeric) %>% dplyr::select(-Balance, everything()), # el select posiciona la variable a predecir al final, para que se grafique bien en caso de que solo haya 1 variable a predecir
lower = list(continuous = lower), diag = list(continuous = diag))
modelo.lm<-lm(Balance~Limite,data=datos.entrenamiento)
modelo.lm
summary(modelo.lm)
modelo.lm<-lm(Balance~Limite~CaliFCredit,data=datos.entrenamiento)
modelo.lm<-lm(Balance~Limite~CalifCredit,data=datos.entrenamiento)
modelo.lm<-lm(Balance~c(Limite,CalifCredit),data=datos.entrenamiento)
modelo.lm<-lm(Balance~Limite~CalifCredit,data=datos.entrenamiento)
modelo.lm<-lm(Balance~Limite+CalifCredit,data=datos.entrenamiento)
modelo.lm
summary(modelo.lm)
datos
datos <- read.table('DeudaCredito.csv',header=TRUE, sep=',',dec='.')
datos
datos$Genero<-factor(datos$Genero,levels=c("Masculino","Femenino"))
datos$Etnicidad<-factor(datos$Etnicidad,levels=c("Afrodescendiente","Asiatico","Caucasico"))
datos$Estudiante<-factor(datos$Estudiante,levels=c("Si","No"))
datos
#str(datos$Genero)
#str(datos$Etnicidad)
#str(datos$Estudiante)
summary(datos)
datos2<-datos <- subset(datos, select = -c(Estudiante,Genero,Casado,Etnicidad))
datos2
str(datos2)
datos2<-cor(datos[,-c(7,8,9,10,11)])
datos2
str(datos2)
datos2<-datos <- subset(datos, select = -c(Estudiante,Genero,Casado,Etnicidad))
datos2
datos2 <- subset(datos, select = -c(Estudiante,Genero,Casado,Etnicidad))
subset(datos, select = -c(Estudiante,Genero,Casado,Etnicidad))
datos
getwd()
datos.entrenamiento
setwd("~/ALEJANDRO/1er Ciclo 2023/Mineria de Datos/Tarea 2/Datos_EjemplosClase_Tarea")
datos <- read.table('DeudaCredito.csv',header=TRUE, sep=',',dec='.')
datos
subset(datos, select = -c(Estudiante,Genero,Casado,Etnicidad))
datos
str(datos2)
datos2<-subset(datos, select = -c(Estudiante,Genero,Casado,Etnicidad))
str(datos2)
matriz.correlacion<-cor(datos2)
plotcorr(matriz.correlacion,col = "red")
corrplot(matriz.correlacion)
set.seed(123)
indices.entrenamiento <- sample(nrow(datos2), nrow(datos2)*0.8)
datos.entrenamiento <- datos2[indices.entrenamiento, ]
indices.testing <- sample(nrow(datos2), nrow(datos2)*0.3)
datos.testing <- datos2[indices.testing, ]
datos.entrenamiento
datos.testing
atipicos<-Boxplot(datos.entrenamiento,data=datos.entrenamiento,id.method="y",col="Blue")
atipicos
modelo.lm<-lm(Balance~Limite+CalifCredit,data=datos.testing)
modelo.lm
summary(modelo.lm)
indices.precision <- function(real, prediccion,cantidad.variables.predictoras) {
return(list(error.cuadratico = MSE(prediccion,real),
raiz.error.cuadratico = RSE(prediccion,real,cantidad.variables.predictoras),
error.relativo = error.relativo(prediccion,real),
correlacion = as.numeric(cor(prediccion,real))))
}
plot.real.prediccion <- function(real, prediccion, modelo = "") {
g <- ggplot(data = data.frame(Real = real, Prediccion = as.numeric(prediccion)), mapping = aes(x = Real, y = Prediccion)) +
geom_point(size = 1, col = "dodgerblue3") +
labs(title = paste0("Real vs Predicción", ifelse(modelo == "", "", paste(", con", modelo))),
x = "Real",
y = "Predicción")
return(g)
}
prediccion <- predict(modelo.lm, datos.testing)
numero.predictoras <- dim(Datos2)[2] - 1
numero.predictoras <- dim(datos2)[2] - 1
numero.predictoras
numero.predictoras <- dim(datos2)[2] - 2
numero.predictoras
prediccion <- predict(modelo.lm, datos.testing)
# Medición de precisión
pre.lm <- indices.precision(datos.testing$Balance, prediccion,2)
# Medición de precisión
pre.lm <- indices.precision(datos.testing$Balance, prediccion,2)
RSS <- function(Pred,Real) {
ss <- sum((Real-Pred)^2)
return(ss)
}
RSE<-function(Pred,Real,NumPred) {
N<-length(Real)-NumPred-1  # <- length(Real)-(NumPred+1)
ss<-sqrt((1/N)*RSS(Pred,Real))
return(ss)
}
MSE <- function(Pred,Real) {
N<-length(Real)
ss<-(1/N)*RSS(Pred,Real)
return(ss)
}
error.relativo <- function(Pred,Real) {
ss<-sum(abs(Real-Pred))/sum(abs(Real))
return(ss)
}
numero.predictoras <- dim(datos2)[2] - 2
numero.predictoras
modelo.lm<-lm(Balance~Limite+CalifCredit,data=datos.entrenamiento)
modelo.lm
modelo.lm<-lm(Balance~Limite+CalifCredit,data=datos.testing)
modelo.lm
summary(modelo.lm)
indices.precision <- function(real, prediccion,cantidad.variables.predictoras) {
return(list(error.cuadratico = MSE(prediccion,real),
raiz.error.cuadratico = RSE(prediccion,real,cantidad.variables.predictoras),
error.relativo = error.relativo(prediccion,real),
correlacion = as.numeric(cor(prediccion,real))))
}
plot.real.prediccion <- function(real, prediccion, modelo = "") {
g <- ggplot(data = data.frame(Real = real, Prediccion = as.numeric(prediccion)), mapping = aes(x = Real, y = Prediccion)) +
geom_point(size = 1, col = "dodgerblue3") +
labs(title = paste0("Real vs Predicción", ifelse(modelo == "", "", paste(", con", modelo))),
x = "Real",
y = "Predicción")
return(g)
}
prediccion <- predict(modelo.lm, datos.testing)
# Medición de precisión
pre.lm <- indices.precision(datos.testing$Balance, prediccion,2)
pre.lm
datos <- read.table('AsientosNinno.csv',header=TRUE, sep=',',dec='.')
datos
datos <- read.table('AsientosNinno.csv',header=TRUE, sep=';',dec='.')
datos
indices.testing <- sample(nrow(datos2), nrow(datos2)*0.15)
datos.testing <- datos2[indices.testing, ]
datos.testing
datos <- read.table('AsientosNinno.csv',header=TRUE, sep=';',dec='.')
datos
set.seed(123)
datos2<-subset(datos, select = -c(CalidadEstant))
set.seed(123)
indices.entrenamiento <- sample(nrow(datos2), nrow(datos2)*0.8)
datos.entrenamiento <- datos2[indices.entrenamiento, ]
indices.testing <- sample(nrow(datos2), nrow(datos2)*0.15)
datos.testing <- datos2[indices.testing, ]
datos.testing
matriz.correlacion<-cor(datos2)
plotcorr(matriz.correlacion,col = "red")
corrplot(matriz.correlacion)
corrplot(matriz.correlacion)
summary(datos2)
indices.entrenamiento <- sample(nrow(datos2), nrow(datos2)*0.85)
datos.entrenamiento <- datos2[indices.entrenamiento, ]
atipicos<-Boxplot(datos.entrenamiento,data=datos.entrenamiento,id.method="y",col="Blue")
atipicos
corrplot(matriz.correlacion)
ggpairs(select_if(datos.entrenamiento, is.numeric) %>% dplyr::select(-Ventas, everything()), # el select posiciona la variable a predecir al final, para que se grafique bien en caso de que solo haya 1 variable a predecir
lower = list(continuous = lower), diag = list(continuous = diag))
corrplot(matriz.correlacion)
setwd("~/ALEJANDRO/1er Ciclo 2023/Mineria de Datos/Tarea 2/Datos_EjemplosClase_Tarea")
datos <- read.table('DeudaCredito.csv',header=TRUE, sep=',',dec='.')
datos2<-subset(datos, select = -c(Estudiante,Genero,Casado,Etnicidad))
set.seed(123)
indices.training <- sample(nrow(datos2), nrow(datos2)*0.8)
datos.training <- datos2[indices.training, ]
indices.testing <- sample(nrow(datos2), nrow(datos2)*0.3)
datos.testing <- datos2[indices.testing, ]
#1.2.1
library(ellipse)
library(corrplot)
summary(datos)
#1.2.2
matriz.correlacion<-cor(datos2)
corrplot(matriz.correlacion)
numero.predictoras <- dim(datos2)[2] - 2
numero.predictoras
numero.predictoras
modelo.lm<-lm(Balance~Limite+CalifCredit,data=datos.training)
modelo.lm
modelo.lm<-lm(Balance~Limite+CalifCredit,data=datos.testing)
modelo.lm
summary(modelo.lm)
indices.precision <- function(real, prediccion,cantidad.variables.predictoras) {
return(list(error.cuadratico = MSE(prediccion,real),
raiz.error.cuadratico = RSE(prediccion,real,cantidad.variables.predictoras),
error.relativo = error.relativo(prediccion,real),
correlacion = as.numeric(cor(prediccion,real))))
}
plot.real.prediccion <- function(real, prediccion, modelo = "") {
g <- ggplot(data = data.frame(Real = real, Prediccion = as.numeric(prediccion)), mapping = aes(x = Real, y = Prediccion)) +
geom_point(size = 1, col = "dodgerblue3") +
labs(title = paste0("Real vs Predicción", ifelse(modelo == "", "", paste(", con", modelo))),
x = "Real",
y = "Predicción")
return(g)
}
g <- plot.real.prediccion(datos.testing$Balance, prediccion, modelo = "Regresión Lineal")
g + geom_smooth(method = lm, size = 0.4, color = "red", se = FALSE)
modelo.lm<-lm(Balance~Limite,data=datos.training)
modelo.lm<-lm(Balance~Limite,data=datos.testing)
g <- plot.real.prediccion(datos.testing$Balance, prediccion, modelo = "Regresión Lineal")
g + geom_smooth(method = lm, size = 0.4, color = "red", se = FALSE)
#5.¿Que error se obtiene sobre la tabla de testing para el modelo de regresion lineal? Interprete las medidas de error obtenidas
prediccion <- predict(modelo.lm, datos.testing)
g <- plot.real.prediccion(datos.testing$Balance, prediccion, modelo = "Regresión Lineal")
g + geom_smooth(method = lm, size = 0.4, color = "red", se = FALSE)
# Medición de precisión
pre.lm <- indices.precision(datos.testing$Balance, prediccion,2)
pre.lm
modelo.lm<-lm(Balance~Limite + CalifCredit,data=datos.training)
modelo.lm<-lm(Balance~Limite + CalifCredit,data=datos.testing)
#5.¿Que error se obtiene sobre la tabla de testing para el modelo de regresion lineal? Interprete las medidas de error obtenidas
prediccion <- predict(modelo.lm, datos.testing)
# Medición de precisión
pre.lm <- indices.precision(datos.testing$Balance, prediccion,2)
g <- plot.real.prediccion(datos.testing$Balance, prediccion, modelo = "Regresión Lineal")
g + geom_smooth(method = lm, size = 0.4, color = "red", se = FALSE)
# Medición de precisión
pre.lm <- indices.precision(datos.testing$Balance, prediccion,2)
pre.lm
modelo.lm<-lm(Balance~Limite,data=datos.testing)
#5.¿Que error se obtiene sobre la tabla de testing para el modelo de regresion lineal? Interprete las medidas de error obtenidas
prediccion <- predict(modelo.lm, datos.testing)
# Medición de precisión
pre.lm <- indices.precision(datos.testing$Balance, prediccion,2)
pre.lm
#5.¿Que error se obtiene sobre la tabla de testing para el modelo de regresion lineal? Interprete las medidas de error obtenidas
prediccion <- predict(modelo.lm, datos.testing)
# Medición de precisión
pre.lm <- indices.precision(datos.testing$Balance, prediccion,1)
pre.lm
modelo.lm<-lm(Balance~Limite+Ingreso,data=datos.testing)
modelo.lm
#5.¿Que error se obtiene sobre la tabla de testing para el modelo de regresion lineal? Interprete las medidas de error obtenidas
prediccion <- predict(modelo.lm, datos.testing)
# Medición de precisión
pre.lm <- indices.precision(datos.testing$Balance, prediccion,2)
pre.lm
modelo.lm<-lm(Balance~Ingreso,data=datos.testing)
#5.¿Que error se obtiene sobre la tabla de testing para el modelo de regresion lineal? Interprete las medidas de error obtenidas
prediccion <- predict(modelo.lm, datos.testing)
# Medición de precisión
pre.lm <- indices.precision(datos.testing$Balance, prediccion,1)
pre.lm
modelo.lm<-lm(Balance~Limite+Ingreso,data=datos.training)
modelo.lm
modelo.lm<-lm(Balance~Limite+Ingreso,data=datos.testing)
modelo.lm
summary(modelo.lm)
indices.precision <- function(real, prediccion,cantidad.variables.predictoras) {
return(list(error.cuadratico = MSE(prediccion,real),
raiz.error.cuadratico = RSE(prediccion,real,cantidad.variables.predictoras),
error.relativo = error.relativo(prediccion,real),
correlacion = as.numeric(cor(prediccion,real))))
}
plot.real.prediccion <- function(real, prediccion, modelo = "") {
g <- ggplot(data = data.frame(Real = real, Prediccion = as.numeric(prediccion)), mapping = aes(x = Real, y = Prediccion)) +
geom_point(size = 1, col = "dodgerblue3") +
labs(title = paste0("Real vs Predicción", ifelse(modelo == "", "", paste(", con", modelo))),
x = "Real",
y = "Predicción")
return(g)
}
#5.¿Que error se obtiene sobre la tabla de testing para el modelo de regresion lineal? Interprete las medidas de error obtenidas
prediccion <- predict(modelo.lm, datos.testing)
# Medición de precisión
pre.lm <- indices.precision(datos.testing$Balance, prediccion,2)
pre.lm
g <- plot.real.prediccion(datos.testing$Balance, prediccion, modelo = "Regresión Lineal")
g + geom_smooth(method = lm, size = 0.4, color = "red", se = FALSE)
modelo.lm<-lm(Balance~Limite+Ingreso+CalifCredit,data=datos.testing)
#5.¿Que error se obtiene sobre la tabla de testing para el modelo de regresion lineal? Interprete las medidas de error obtenidas
prediccion <- predict(modelo.lm, datos.testing)
# Medición de precisión
pre.lm <- indices.precision(datos.testing$Balance, prediccion,3)
pre.lm
g <- plot.real.prediccion(datos.testing$Balance, prediccion, modelo = "Regresión Lineal")
g + geom_smooth(method = lm, size = 0.4, color = "red", se = FALSE)
summary(modelo.lm)
modelo.lm
#Coeficieintes para Beta
modelo.lm$coefficients
summary(modelo.lm)
#Coeficieintes para Beta
modelo.lm$coefficients
#5.¿Que error se obtiene sobre la tabla de testing para el modelo de regresion lineal? Interprete las medidas de error obtenidas
prediccion <- predict(modelo.lm, datos.testing)
# Medición de precisión
pre.lm <- indices.precision(datos.testing$Balance, prediccion,3)
pre.lm
